<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust - This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/categories/this-week-in-rust/atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2025-01-01T00:00:00-05:00</updated><entry><title>This Week in Rust 580</title><link href="https://this-week-in-rust.org/blog/2025/01/01/this-week-in-rust-580/" rel="alternate"></link><published>2025-01-01T00:00:00-05:00</published><updated>2025-01-01T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2025-01-01:/blog/2025/01/01/this-week-in-rust-580/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want TWIR in your inbox? &lt;a href="https://this-week-in-rust.us11.list-manage.com/subscribe?u=fd84c1c757e02889a9b08d289&amp;amp;id=0ed8b72485"&gt;Subscribe here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="foundation"&gt;&lt;a class="toclink" href="#foundation"&gt;Foundation&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/rust-foundation-in-review-2024-annual-report-preview/"&gt;2024 in Review: Rust Foundation Annual Report Preview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2025-01-01-announcing-axum-0-8-0"&gt;Announcing axum 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/blog/rustport/"&gt;Fish 4.0: The Fish Of Theseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://usebottles.com/posts/2024-12-27-rust-libcosmic-next/"&gt;Rust and libcosmic in Bottles Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cnieg/gitlab-tokens-exporter/"&gt;gitlab-tokens-exporter 1.0.0 - Exports the status of gitlab tokens as Prometheus metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev-state.com/posts/danube_update_020/"&gt;Danube pub/sub messaging platform - updates v0.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/catching-up-with-async-rust"&gt;Catching up with async Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://timclicks.dev/podcast/reliable-software-an-interview-with-jon-gjengset"&gt;Reliable software: An interview with Jon Gjengset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/lars-bergstrom/"&gt;Rust in Google with Lars Bergstrom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=f4rKy-IDeVA"&gt;12 months with the Bevy Game Engine - This Year in Bevy 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ideas.reify.ing/en/blog/complete-guide-to-wasip2-for-rust-python-programmers/"&gt;A Complete Guide to WASIp2 for Rust and Python Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/fake"&gt;fake&lt;/a&gt;, a library (and recently console utility) to generate fake data of various types.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1384"&gt;llogiq&lt;/a&gt; for the half-self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="calls-for-testing"&gt;&lt;a class="toclink" href="#calls-for-testing"&gt;Calls for Testing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/call-for-testing"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rustup"&gt;&lt;a class="toclink" href="#rustup"&gt;&lt;a href="https://github.com/rust-lang/rustup/labels/call-for-testing"&gt;Rustup&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](URL to issue) --&gt;
&lt;!-- * [ - ]() --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/watchexec/clearscreen/issues/10"&gt;clearscreen - Refactor winapi usage to windows-sys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- or if none - *No Calls for participation were submitted this week.* --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/plabayo/rama/issues/357"&gt;rama - support HAR exporter (http) layer in rama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plabayo/rama/issues/374"&gt;rama - add full-stack rama benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://github.com/rust-lang/this-week-in-rust?tab=readme-ov-file#call-for-participation-guidelines"&gt;here&lt;/a&gt; or through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="cfp-events"&gt;&lt;a class="toclink" href="#cfp-events"&gt;CFP - Events&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [**event name**](URL to CFP)| Date CFP closes in YYYY-MM-DD | city,state,country | Date of event in YYYY-MM-DD --&gt;
&lt;!-- or if none - *No Calls for papers or presentations were submitted this week.* --&gt;

&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;331 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-12-24..2024-12-31"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134751"&gt;enable LSX feature for LoongArch OpenHarmony target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134932"&gt;explicitly set float ABI for all ARM targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134914"&gt;A couple datalog/borrowck cleanups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134866"&gt;&lt;code&gt;rustc_codegen_ssa&lt;/code&gt;: Buffer file writes in &lt;code&gt;link_rlib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134956"&gt;account for C string literals and &lt;code&gt;format_args&lt;/code&gt; in &lt;code&gt;HiddenUnicodeCodepoints&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134664"&gt;account for removal of multiline span in suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134741"&gt;actually print all the relevant parts of a coroutine in verbose mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134809"&gt;add &lt;code&gt;--no-capture&lt;/code&gt;/&lt;code&gt;--nocapture&lt;/code&gt; as bootstrap arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133663"&gt;add a compiler intrinsic to back &lt;code&gt;bigint_helper_methods&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134627"&gt;avoid ICE in borrowck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134941"&gt;compiler: add a statement-of-intent to &lt;code&gt;rustc_abi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134670"&gt;compute liveness constraints in location-sensitive polonius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134735"&gt;consider arm to diverge if guard diverges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/131244"&gt;consider empty-unreachable otherwise branches in MatchBranchSimplification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134743"&gt;default to short backtraces for dev builds of rustc itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134737"&gt;implement &lt;code&gt;default_overrides_default_fields&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134765"&gt;improve default target options for &lt;code&gt;x86_64-unknown-linux-none&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134724"&gt;improve type mutation for certain structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134885"&gt;make -Csoft-float have an effect on all ARM targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134798"&gt;make &lt;code&gt;ty::Error&lt;/code&gt; implement all auto traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134933"&gt;make sure we check the future type is &lt;code&gt;Sized&lt;/code&gt; in &lt;code&gt;AsyncFn*&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134834"&gt;skip parenthesis around tuple &lt;code&gt;struct&lt;/code&gt; field calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134833"&gt;skip parenthesis if &lt;code&gt;.&lt;/code&gt; makes statement boundary unambiguous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134827"&gt;some random region tweaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134803"&gt;strip debuginfo from rustc-main and rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4114"&gt;miri: FD handling: avoid unnecessary dynamic downcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4115"&gt;miri: epoll: avoid some clones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4109"&gt;miri: error on some invalid flag combinations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4113"&gt;miri: fix toolchain flag parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4112"&gt;miri: socket read/write cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134768"&gt;stabilize &lt;code&gt;const_alloc_layout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134757"&gt;stabilize &lt;code&gt;const_swap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134929"&gt;stabilize &lt;code&gt;style_edition = "2024"&lt;/code&gt; in-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134927"&gt;make &lt;code&gt;slice::as_flattened_mut&lt;/code&gt; unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132195"&gt;tidy up bigint multiplication methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132431"&gt;from iterator for more tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134379"&gt;add &lt;code&gt;into_array&lt;/code&gt; conversion destructors for &lt;code&gt;Box&lt;/code&gt;, Rc&lt;code&gt;, and Arc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134620"&gt;avoid short writes in LineWriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134547"&gt;unify &lt;code&gt;fs::copy&lt;/code&gt; and &lt;code&gt;io::copy&lt;/code&gt; on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134649"&gt;fix forgetting to save statx availability on success&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134819"&gt;fix mistake in windows file open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134786"&gt;fix renaming symlinks on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134622"&gt;windows: use WriteFile to write to a UTF-8 console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134722"&gt;windows: use &lt;code&gt;FILE_ALLOCATION_INFO&lt;/code&gt; for truncation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14966"&gt;cargo: &lt;code&gt;fix(package)&lt;/code&gt;: check dirtiness of path fields in manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14981"&gt;cargo: &lt;code&gt;fix(package)&lt;/code&gt;: check dirtiness of symlinks source files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14994"&gt;cargo: &lt;code&gt;fix(package)&lt;/code&gt;: warn if symlinks checked out as plain text files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14982"&gt;cargo: &lt;code&gt;refactor(package)&lt;/code&gt;: split &lt;code&gt;cargo_package&lt;/code&gt; to modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14977"&gt;cargo: fix: assure possibly blocking non-files (like FIFOs) won't be picked up for publishing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14973"&gt;cargo: moved manifest metadata tracking from fingerprint to dep info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14979"&gt;cargo: test: make path arguments more generic and flexible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14990"&gt;cargo: test: relax &lt;code&gt;bad_crate_type&lt;/code&gt; to only match error message prefix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14989"&gt;cargo: test: relax panic output assertion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134806"&gt;rustdoc: use shorter paths as preferred canonical paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134857"&gt;unsafe binder support in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13877"&gt;clippy: &lt;code&gt;borrow_interior_mutable_const&lt;/code&gt; ICE into FN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13809"&gt;clippy: auto-fix &lt;code&gt;if_not_else&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13864"&gt;clippy: correct suggestion for &lt;code&gt;manual_div_ceil&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13884"&gt;clippy: do not remove required parentheses in &lt;code&gt;borrow_as_ptr&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13844"&gt;clippy: do not trigger &lt;code&gt;trailing_empty_array&lt;/code&gt; in tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13890"&gt;clippy: fix arguments of &lt;code&gt;ExprKind::MethodCall&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13906"&gt;clippy: fix parentheses when replacing &lt;code&gt;matches!(…, None)&lt;/code&gt; with &lt;code&gt;.is_none()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13737"&gt;clippy: make &lt;code&gt;inconsistent_struct_constructor&lt;/code&gt; "all fields are shorthand" requirement configurable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13873"&gt;clippy: remove description of known problems in &lt;code&gt;match_same_arms&lt;/code&gt; that have already been resolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13850"&gt;clippy: remove obsolete comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13863"&gt;clippy: use the correct &lt;code&gt;ParamEnv&lt;/code&gt; when checking future's output type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13907"&gt;clippy: use the full lifetime name in suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18754"&gt;rust-analyzer: cleanup target fetching for cargo metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18785"&gt;rust-analyzer: cleanup toolchain info fetching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18792"&gt;rust-analyzer: decouple proc-macro server protocol from the server implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18801"&gt;rust-analyzer: show go-to-type-def actions for subst when hovering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18707"&gt;rust-analyzer: show substitution where hovering over generic things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18743"&gt;rust-analyzer: unify handling of path diagnostics in hir-ty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18794"&gt;rust-analyzer: fix bug of "fill match arm" action in &lt;code&gt;tokio::main&lt;/code&gt; macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18756"&gt;rust-analyzer: fix missing name &lt;code&gt;enum&lt;/code&gt; when hovering on fields in variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18795"&gt;rust-analyzer: fix render of literal to be rendered in codeblock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18797"&gt;rust-analyzer: fix replace-if-let-with-match generates non-exhausive match&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18791"&gt;rust-analyzer: avoid generating colliding names in &lt;code&gt;extract_variable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18779"&gt;rust-analyzer: consider &lt;code&gt;Enum::Variant&lt;/code&gt; even when it comes from a different crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18784"&gt;rust-analyzer: do not merge spans if they have different anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18778"&gt;rust-analyzer: fix flycheck diagnostics flickering for binary targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18789"&gt;rust-analyzer: fix invalid &lt;code&gt;-O&lt;/code&gt; flag used by cfg discovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18755"&gt;rust-analyzer: fix metrics workflow using the wrong download-artifact version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18802"&gt;rust-analyzer: incorrect &lt;code&gt;file_id&lt;/code&gt; used for ranges in outgoing calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18807"&gt;rust-analyzer: populate cargo config env vars for crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18774"&gt;rust-analyzer: implement parameter variance inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18744"&gt;rust-analyzer: treat ; as a terminator rather part of a glued expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A pretty quiet week, with the exception of a significant improvement due to
landing LTO for C / C++ programs compiled as part of the build.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=0eca4dd3205a01dba4bd7b7c140ec370aff03440&amp;amp;end=93722f7ed56bcf27839a6355074095c4320b7d37&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;0eca4dd3..93722f7e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0 Regressions, 1 Improvements, 1 Mixed; 0 of them in rollups
53 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2024-12-30.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs_1"&gt;&lt;a class="toclink" href="#rfcs_1"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust_1"&gt;&lt;a class="toclink" href="#rust_1"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Cargo Tracking Issues or PRs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-team"&gt;&lt;a class="toclink" href="#language-team"&gt;&lt;a href="https://github.com/rust-lang/lang-team/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc+"&gt;Language Team&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Team Proposals entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3753"&gt;RFC: &lt;code&gt;Foo { .. }&lt;/code&gt; pattern matches non-struct types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3751"&gt;RFC: add LLM text version to rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3750"&gt;RFC: cfg_os_version_min&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2025-01-01 - 2025-01-29 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-02 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633277/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-04 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033/"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-08 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304951805"&gt;&lt;strong&gt;BlockMesh Network implemented in Rust with Ohad Dahan (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898167"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Miami, FL, US | &lt;a href="https://www.meetup.com/rust-miami/"&gt;Rust Miami&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-miami/events/305122950"&gt;&lt;strong&gt;Rust / Wasm on Serverless and Frontend&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/events/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/300820279/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/events/"&gt;Dallas Rust User Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/302815031"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-15 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/305064546"&gt;&lt;strong&gt;An introduction to WASM in Rust with Márk Tolmács (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-15 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/events/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/304051782"&gt;&lt;strong&gt;Leptos&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2024/12/19/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633278/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/305110744"&gt;&lt;strong&gt;Exploring Rust Enums with Yoni Peleg (Virtual, Hebrew)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/events/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/rdhhptyhccbcc"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-22 | Virtual (Rotterdam, NL) | &lt;a href="https://www.meetup.com/bevy-game-development/events/"&gt;Bevy Game Development&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bevy-game-development/events/305111151"&gt;&lt;strong&gt;Bevy Meetup #8&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-26 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/304971264"&gt;&lt;strong&gt;Rust and embedded programming with Leon Vak (online in Hebrew)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-12 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/304898730/"&gt;&lt;strong&gt;In person Rust January 2025 at Abra in Raanana&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-08 | Girona, ES | &lt;a href="https://lu.ma/rust-girona"&gt;Rust Girona&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lu.ma/ckf2s00f"&gt;&lt;strong&gt;Rust Girona - 2025 01&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-08 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/events/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/305038426"&gt;&lt;strong&gt;Reading Rust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Oslo, NO | &lt;a href="https://www.meetup.com/rust-oslo/events/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-oslo/events/303154281"&gt;&lt;strong&gt;Rust Hack'n'Learn at Kampen Bistro&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Mannheim, DE | &lt;a href="https://www.meetup.com/hackschool-rhein-neckar/events/"&gt;Hackschool - Rhein-Neckar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackschool-rhein-neckar/events/305230542"&gt;&lt;strong&gt;Rust Your Engines #5&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Amsterdam, NL | &lt;a href="https://www.meetup.com/rust-amsterdam-group/events/"&gt;Rust Developers Amsterdam Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-amsterdam-group/events/305339712"&gt;&lt;strong&gt;Meetup @ Avalor AI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Karlsruhe, DE | &lt;a href="https://www.meetup.com/rust-hack-learn-karlsruhe/events/"&gt;Rust Hack &amp;amp; Learn Karlsruhe&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-hack-learn-karlsruhe/events/305144321"&gt;&lt;strong&gt;Karlsruhe Rust Hack and Learn Meetup bei BlueYonder&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Ghent, BE | &lt;a href="https://sysghent.be"&gt;Systems Programming Ghent&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/systems-programming-ghent/events/305201540/?slug=systems-programming-ghent&amp;amp;eventId=305201540"&gt;&lt;strong&gt;Tech Talks &amp;amp; Dinner: Insights on Systems Programming Side Projects (in Rust) - Leptos (full-stack Rust with webassembly), Karyon (distributed p2p software in Rust), FunDSP (audio synthesis in Rust)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Leipzig, SN, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/303604074"&gt;&lt;strong&gt;Self-Organized Peer-to-Peer Networks using Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-23 | Barcelona, ES | &lt;a href="https://www.meetup.com/barcelona-free-software/events/"&gt;Barcelona Free Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/barcelona-free-software/events/305179554"&gt;&lt;strong&gt;Why Build a New Browser Engine in Rust?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-28 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/events/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/304487851"&gt;&lt;strong&gt;Hack Night - Advent of Code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-08 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/events/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/305125929"&gt;&lt;strong&gt;Rust Dinner - Pinthouse Pizza South Lamar&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/hackerdojo/events/"&gt;Hacker Dojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackerdojo/events/305044124"&gt;&lt;strong&gt;RUST MEETUP at HACKER DOJO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-10 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951467"&gt;&lt;strong&gt;Lechmere Rust Lunch, Jan 10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Nashville, TN, US | &lt;a href="https://www.meetup.com/music-city-rust-developers/events/"&gt;Music City Rust Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/music-city-rust-developers/events/304333017"&gt;&lt;strong&gt;Rust Game Development Series 1: Community Introductions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-18 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951470"&gt;&lt;strong&gt;Back Bay Rust Lunch, Jan 18&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/302638258"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-22 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/events/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/305325657"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1h2zwpx/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Hear, hear! Rust is the real deep state. They knew all along that memory-related bugs would dominate the Vulnerability Rating Taxonomy. Coincidence? I think not. 🐛🔧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://infosec.exchange/@amoghavarsha/113741018641283042"&gt;@amoghavarsha@infosec.exchange on mastodon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1646"&gt;llogiq&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;, &lt;a href="https://github.com/bdillo"&gt;bdillo&lt;/a&gt;&lt;/em&gt;
&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1hroo40/this_week_in_rust_580/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 579</title><link href="https://this-week-in-rust.org/blog/2024/12/25/this-week-in-rust-579/" rel="alternate"></link><published>2024-12-25T00:00:00-05:00</published><updated>2024-12-25T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2024-12-25:/blog/2024/12/25/this-week-in-rust-579/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want TWIR in your inbox? &lt;a href="https://this-week-in-rust.us11.list-manage.com/subscribe?u=fd84c1c757e02889a9b08d289&amp;amp;id=0ed8b72485"&gt;Subscribe here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theembeddedrustacean.com/p/the-embedded-rustacean-issue-35"&gt;The Embedded Rustacean Issue #35&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-trends.com/newsletter/unlocking-new-insights-and-opportunities-in-rust/"&gt;Rust Trends Issue #56&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/musi_lili"&gt;musi lili retro game engine 0.1 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greyblake/nutype/releases/tag/v0.5.1"&gt;Nutype 0.5.1: better no_std support and bug fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ibis.wiki/article/Ibis_release_0.2.0_-_Federated_Wiki_with_Shiny_Redesign@ibis.wiki"&gt;Ibis 0.2.0 - Federated Wiki with Shiny Redesign, based on Diesel, Actix and Leptos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/dagrs"&gt;dagrs 0.4.2 - Flow-based Programming in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joonaa.dev/blog/07/avian-0-2"&gt;Avian Physics 0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint.dev/blog/slint-1.9-released"&gt;Slint 1.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitoxideLabs/gitoxide/discussions/1738"&gt;gitoxide - december 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daniel.haxx.se/blog/2024/12/21/dropping-hyper/"&gt;Dropping Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xnacly.me/posts/2024/embed-lua-in-rust/"&gt;Embedding Lua in sqleibniz with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yoric.github.io/post/rust-refinement-types/"&gt;What would it take to add refinement types to Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://contextgeneric.dev/blog/early-preview-announcement/"&gt;Context-Generic Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@evadawnley/building-a-secure-hierarchical-key-derivation-system-in-rust-b5a0ecee18d7"&gt;Building a Secure Hierarchical Key Derivation System in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2024/12/19/streamlined-dataflow-analysis-code-in-rustc.html"&gt;Streamlined dataflow analysis code in rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.polybdenum.com/2024/12/21/four-limitations-of-rust-s-borrow-checker.html"&gt;Four limitations of Rust’s borrow checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://barretts.club/posts/rust_review_2024/"&gt;A Review of Rust in 2024: What Next?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.urth.org/2024/12/21/my-actions-rust-cross-action-now-has-built-in-caching/"&gt;My actions-rust-cross Action Now Has Built-In Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neoexogenesis.com/posts/rust-windsurf-transformation/"&gt;Transforming Rust Development: How Windsurf AI Tripled Productivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rakhim.exotext.com/how-to-build-and-publish-multi-platform-rust-binaries"&gt;How to build and publish multi-platform Rust binaries via Github actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2412.15042"&gt;Compiling C to Safe Rust, Formalized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emschwartz.me/unnecessary-optimization-in-rust-hamming-distances-simd-and-auto-vectorization/"&gt;Unnecessary Optimization in Rust: Hamming Distances, SIMD, and Auto-Vectorization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kobzol.github.io/teaching/2024/12/18/rust-exercises.html"&gt;Rust university course exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=PPjXM8G8ax0"&gt;The SQLite Rewrite In Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/llMBQll/OmniLED"&gt;OmniLED&lt;/a&gt;, a helper to display things like time or audio volumne on a LED matrix that some peripherials (such as gaming keyboards) have.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1383"&gt;llogiq&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="calls-for-testing"&gt;&lt;a class="toclink" href="#calls-for-testing"&gt;Calls for Testing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/call-for-testing"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rustup"&gt;&lt;a class="toclink" href="#rustup"&gt;&lt;a href="https://github.com/rust-lang/rustup/labels/call-for-testing"&gt;Rustup&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/issues/3806"&gt;CfT: Test out Rustup's &lt;code&gt;reqwest&lt;/code&gt; backend with &lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/issues/3806#issue-2278962476"&gt;Testing steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](URL to issue) --&gt;
&lt;!-- * [ - ]() --&gt;
&lt;!-- or if none - *No Calls for participation were submitted this week.* --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/plabayo/rama/issues/363"&gt;Rama — provide constants for common (network) hosts to rama-net's Host&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plabayo/rama/issues/332"&gt;Rama — support vec/array impl for DnsResolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plabayo/rama/issues/357"&gt;Rama — support HAR exporter (http) layer in rama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://github.com/rust-lang/this-week-in-rust?tab=readme-ov-file#call-for-participation-guidelines"&gt;here&lt;/a&gt; or through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="cfp-events"&gt;&lt;a class="toclink" href="#cfp-events"&gt;CFP - Events&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [**event name**](URL to CFP)| Date CFP closes in YYYY-MM-DD | city,state,country | Date of event in YYYY-MM-DD --&gt;
&lt;!-- or if none - *No Calls for papers or presentations were submitted this week.* --&gt;

&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;398 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-12-17..2024-12-24"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133643"&gt;-Znext-solver: modify candidate preference rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133702"&gt;&lt;code&gt;Variants::Single&lt;/code&gt;: do not use invalid VariantIdx for uninhabited enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134397"&gt;&lt;code&gt;rustc_borrowck&lt;/code&gt;: Suggest changing &lt;code&gt;&amp;amp;raw const&lt;/code&gt; to &lt;code&gt;&amp;amp;raw mut&lt;/code&gt; if applicable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/123604"&gt;abstract &lt;code&gt;ProcThreadAttributeList&lt;/code&gt; into its own &lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/128780"&gt;add &lt;code&gt;--doctest-compilation-args&lt;/code&gt; option to add compilation flags to doctest compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134608"&gt;add &lt;code&gt;ignore-rustc-debug-assertions&lt;/code&gt; to &lt;code&gt;tests/ui/associated-consts/issue-93775.rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134611"&gt;align &lt;code&gt;{i686,x86_64}-win7-windows-msvc&lt;/code&gt; to their parent targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134586"&gt;also lint on option of function pointer comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134493"&gt;always run &lt;code&gt;tail_expr_drop_order&lt;/code&gt; lint in promoted MIR query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134625"&gt;begin to implement type system layer of unsafe binders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134465"&gt;cleanup &lt;code&gt;TypeVerifier&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133961"&gt;cleanup region handling: add &lt;code&gt;LateParamRegionKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134701"&gt;correctly note item kind in &lt;code&gt;NonConstFunctionCall&lt;/code&gt; error message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134323"&gt;coverage: dismantle &lt;code&gt;map_data.rs&lt;/code&gt; by moving its responsibilities elsewhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134497"&gt;coverage: store coverage source regions as &lt;code&gt;Span&lt;/code&gt; until codegen (take 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134599"&gt;detect invalid exprs in parser used by pretty-printer tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133087"&gt;detect missing &lt;code&gt;.&lt;/code&gt; in method chain in &lt;code&gt;let&lt;/code&gt; bindings and statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134635"&gt;don't ICE on illegal &lt;code&gt;dyn*&lt;/code&gt; casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134603"&gt;explain why a type is not eligible for &lt;code&gt;impl PointerLike&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134406"&gt;fix &lt;code&gt;-Z input-stats&lt;/code&gt; ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133926"&gt;fix const conditions for RPITITs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134638"&gt;fix effect predicates from item bounds in old solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134366"&gt;fix logical error with what text is considered whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134600"&gt;fix parenthesization of chained comparisons by pretty-printer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134474"&gt;forbid overwriting types in typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134268"&gt;foundations of location-sensitive polonius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134575"&gt;handle &lt;code&gt;DropKind::ForLint&lt;/code&gt; in coroutines correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134354"&gt;handle fndef rendering together with signature rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134501"&gt;handle member constraints directly in the mir type checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134321"&gt;hide &lt;code&gt;= _&lt;/code&gt; as associated constant value inside impl blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134668"&gt;make sure we don't lose default &lt;code&gt;struct&lt;/code&gt; value when formatting &lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134486"&gt;make sure we handle &lt;code&gt;backwards_incompatible_lint&lt;/code&gt; drops appropriately in drop elaboration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134639"&gt;make sure we note ambiguity causes on positive/negative impl conflicts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134477"&gt;move &lt;code&gt;lint_unused_mut&lt;/code&gt; into sub-fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134574"&gt;next-solver: disable unnecessary hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133103"&gt;pass FnAbi to &lt;code&gt;find_mir_or_eval_fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134481"&gt;point at lint name instead of whole attr for gated lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133782"&gt;precedence improvements: closures and jumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133801"&gt;promote powerpc64le-unknown-linux-musl to tier 2 with host tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134243"&gt;re-export more &lt;code&gt;rustc_span::symbol&lt;/code&gt; things from &lt;code&gt;rustc_span&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134561"&gt;reduce the amount of explicit &lt;code&gt;FatalError.raise()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134539"&gt;restrict &lt;code&gt;#[non_exaustive]&lt;/code&gt; on structs with default field values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133328"&gt;simplify &lt;code&gt;SwitchInt&lt;/code&gt; handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134601"&gt;support pretty-printing &lt;code&gt;dyn*&lt;/code&gt; trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134326"&gt;use &lt;code&gt;PtrMetadata&lt;/code&gt; instead of &lt;code&gt;Len&lt;/code&gt; in slice drop shims&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134368"&gt;use links to edition guide for edition migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/131072"&gt;win: use POSIX rename semantics for &lt;code&gt;std::fs::rename&lt;/code&gt; if available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130786"&gt;mir-opt: a sub-BB of a cleanup BB must also be a cleanup BB in &lt;code&gt;EarlyOtherwiseBranch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134560"&gt;miri: add &lt;code&gt;track_caller&lt;/code&gt; to thread spawning methods for better backtraces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4098"&gt;miri: add warning explaining the limitations of the native code mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4072"&gt;miri: implement blocking &lt;code&gt;unnamed_socket&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4105"&gt;miri: implement many-seeds mode directly in the driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4104"&gt;miri: provide a way to compare benchmark results with baseline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133793"&gt;speed up &lt;code&gt;Parser::expected_tokens&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134514"&gt;improve &lt;code&gt;dependency_format&lt;/code&gt; a bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134161"&gt;overhaul token cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134376"&gt;fix perf regression in rustdoc after hir attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132056"&gt;stabilize &lt;code&gt;#[diagnostic::do_not_recommend]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134689"&gt;core: fix const &lt;code&gt;ptr::swap_nonoverlapping&lt;/code&gt; when there are pointers at odd offsets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133265"&gt;add a range argument to &lt;code&gt;vec.extract_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130733"&gt;optimize &lt;code&gt;is_ascii&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;[u8]&lt;/code&gt; further&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134642"&gt;implement &lt;code&gt;PointerLike&lt;/code&gt; for &lt;code&gt;isize&lt;/code&gt;, &lt;code&gt;NonNull&lt;/code&gt;, &lt;code&gt;Cell&lt;/code&gt;, &lt;code&gt;UnsafeCell&lt;/code&gt;, and &lt;code&gt;SyncUnsafeCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134573"&gt;unimplement &lt;code&gt;PointerLike&lt;/code&gt; for trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/592"&gt;hashbrown: add 128-bit SIMD implementation for LoongArch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/736"&gt;compiler-builtins: fix a bug in &lt;code&gt;abs_diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14938"&gt;cargo: build-std: make Resolve align to what to build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14960"&gt;cargo: cargo-package: add more traces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14900"&gt;cargo: cargo-rustc: stabilize higher precedence trailing flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14968"&gt;cargo: package: show dirty filepaths relative to git workdir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14970"&gt;cargo: package: use relpath to cwd for vcs dirtiness report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14963"&gt;cargo: add the &lt;code&gt;test&lt;/code&gt; cfg as a well known cfg before of compiler change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14951"&gt;cargo: do not hash absolute sysroot path into stdlib crates metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14969"&gt;cargo: fixed the error message for a user to open the crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/6425"&gt;rustfmt: fix incorrect strip r# prefix from labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13854"&gt;clippy: add allow-indexing-slicing-in-tests option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13766"&gt;clippy: do not mark attributes with unknown namespace as useless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13826"&gt;clippy: don't trigger &lt;code&gt;filter_map_identity&lt;/code&gt; with an iterator from an empty array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13847"&gt;clippy: use multipart suggestion in &lt;code&gt;unnecessary_to_owned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18729"&gt;rust-analyzer: clear flycheck diagnostics more granularly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18715"&gt;rust-analyzer: fix AsmOption rule in rust.ungram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18716"&gt;rust-analyzer: consider both completion detail fields in &lt;code&gt;to_proto&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18741"&gt;rust-analyzer: delay initial flycheck until after build scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18714"&gt;rust-analyzer: do not ask the client to resolve for non existing label details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18739"&gt;rust-analyzer: don't trigger paren wrapping typing handler after idents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18723"&gt;rust-analyzer: fix a case where completion was unable to expand a macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18740"&gt;rust-analyzer: fix empty check diagnostics not marking files as changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18742"&gt;rust-analyzer: fix flycheck workspace when requested but package was found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18708"&gt;rust-analyzer: fix pretty-printing of &lt;code&gt;@&lt;/code&gt; patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18738"&gt;rust-analyzer: properly check if workspace flychecking is allowed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18726"&gt;rust-analyzer: reduce applicability of &lt;code&gt;unnecessary_async&lt;/code&gt; assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18727"&gt;rust-analyzer: remove &lt;code&gt;always!&lt;/code&gt; check for &lt;code&gt;file_id&lt;/code&gt; in &lt;code&gt;runnables&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18710"&gt;rust-analyzer: remove salsa from proc-macro server dep tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18711"&gt;rust-analyzer: taking a raw ref of a deref is always safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We missed triage last week due to some process issues, so this triage includes two weeks of data. The overall result is positive, due to parser optimizations (&lt;a href="https://github.com/rust-lang/rust/pull/133793"&gt;#133793&lt;/a&gt;), trait solving optimizations (&lt;a href="https://github.com/rust-lang/rust/pull/134501"&gt;#134501&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust/pull/132325"&gt;#132325&lt;/a&gt;) and bumping the cc crate (&lt;a href="https://github.com/rust-lang/rust/pull/134505"&gt;#134505&lt;/a&gt;), which &lt;a href="https://github.com/rust-lang/cc-rs/pull/1279"&gt;improved the performance&lt;/a&gt; of C/C++ dependencies of the compiler.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@kobzol&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=1b3fb316751227d30b1523ed0e3f00d83956d4d0&amp;amp;end=0eca4dd3205a01dba4bd7b7c140ec370aff03440&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;1b3fb316..0eca4dd3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.5%&lt;/td&gt;
&lt;td align="center"&gt;[0.3%, 0.8%]&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;1.0%&lt;/td&gt;
&lt;td align="center"&gt;[1.0%, 1.0%]&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-1.8%&lt;/td&gt;
&lt;td align="center"&gt;[-7.5%, -0.3%]&lt;/td&gt;
&lt;td align="center"&gt;254&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-1.3%&lt;/td&gt;
&lt;td align="center"&gt;[-5.4%, -0.3%]&lt;/td&gt;
&lt;td align="center"&gt;224&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-1.8%&lt;/td&gt;
&lt;td align="center"&gt;[-7.5%, 0.8%]&lt;/td&gt;
&lt;td align="center"&gt;257&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 Regressions, 10 Improvements, 12 Mixed; 9 of them in rollups
90 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/457d83dc231ed684e9f09e96fdf41f45bed0fe67/triage/2024-12-23.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3591"&gt;Add support for &lt;code&gt;use Trait::func&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3691"&gt;crates.io: Trusted Publishing Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs_1"&gt;&lt;a class="toclink" href="#rfcs_1"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust_1"&gt;&lt;a class="toclink" href="#rust_1"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/134442"&gt;Specify the behavior of &lt;code&gt;file!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/134367"&gt;Stabilize &lt;code&gt;feature(trait_upcasting)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/133820"&gt;Stabilize &lt;code&gt;derive(CoercePointee)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/133870"&gt;Stabilize &lt;code&gt;asm_goto feature gate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/104642"&gt;Tracking Issue for get_many_mut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/133073"&gt;&lt;code&gt;--nocapture&lt;/code&gt; doesn't follow common CLI conventions, making it a stumbling block to people debugging failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/95892"&gt;Tracking Issue for &lt;code&gt;sub_ptr&lt;/code&gt; (feature &lt;code&gt;ptr_sub_ptr&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/132431"&gt;From iterator for more tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/83163"&gt;Tracking Issue for const_swap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/67521"&gt;Tracking issue for const &lt;code&gt;alloc::Layout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Cargo Tracking Issues or PRs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-team"&gt;&lt;a class="toclink" href="#language-team"&gt;&lt;a href="https://github.com/rust-lang/lang-team/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc+"&gt;Language Team&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Team Proposals entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3748"&gt;RFC: Set CARGO_CHECK environment variable when type checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3745"&gt;unsized params in traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3742"&gt;Convert "reassignment of immutable local" and "mutable borrow of immutable local" from a hard error to a deny-by-default lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-12-25 - 2025-01-22 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-26 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898145"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-02| Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633277/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-04 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033/"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-06 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/305045436"&gt;&lt;strong&gt;logger.info(f"Don't Give your {secrets} away") by Tamar Galer (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-07 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304883841"&gt;&lt;strong&gt;Microdosing Rust to your organization with Aviram Hassan (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-08 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304951805"&gt;&lt;strong&gt;BlockMesh Network implemented in Rust with Ohad Dahan (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898167"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Miami, FL, US | &lt;a href="https://www.meetup.com/rust-miami/"&gt;Rust Miami&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-miami/events/305122950"&gt;&lt;strong&gt;Rust / Wasm on Serverless and Frontend&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/events/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/300820279/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/events/"&gt;Dallas Rust User Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/302815031"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/305064546"&gt;&lt;strong&gt;An introduction to WASM in Rust with Márk Tolmács (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-15 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/events/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/304051782"&gt;&lt;strong&gt;Leptos&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2024/12/19/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633278/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/305110744"&gt;&lt;strong&gt;Exploring Rust Enums with Yoni Peleg (Virtual, Hebrew)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/events/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/rdhhptyhccbcc"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-22 | Virtual (Rotterdam, NL) | &lt;a href="https://www.meetup.com/bevy-game-development/events/"&gt;Bevy Game Development&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bevy-game-development/events/305111151"&gt;&lt;strong&gt;Bevy Meetup #8&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-12 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/304898730/"&gt;&lt;strong&gt;In person Rust January 2025 at Abra in Raanana&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-08 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/events/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/305038426"&gt;&lt;strong&gt;Reading Rust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Oslo, NO | &lt;a href="https://www.meetup.com/rust-oslo/events/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-oslo/events/303154281"&gt;&lt;strong&gt;Rust Hack'n'Learn at Kampen Bistro&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Karlsruhe, DE | &lt;a href="https://www.meetup.com/rust-hack-learn-karlsruhe/events/"&gt;Rust Hack &amp;amp; Learn Karlsruhe&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-hack-learn-karlsruhe/events/305144321"&gt;&lt;strong&gt;Karlsruhe Rust Hack and Learn Meetup bei BlueYonder&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Ghent, BE | &lt;a href="https://sysghent.be"&gt;Systems Programming Ghent&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/systems-programming-ghent/events/305201540/?slug=systems-programming-ghent&amp;amp;eventId=305201540"&gt;&lt;strong&gt;Tech Talks &amp;amp; Dinner: Insights on Systems Programming Side Projects (in Rust) - Leptos (full-stack Rust with webassembly), Karyon (distributed p2p software in Rust), FunDSP (audio synthesis in Rust)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | Leipzig, SN, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/303604074"&gt;&lt;strong&gt;Self-Organized Peer-to-Peer Networks using Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-26 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/hackerdojo/events/"&gt;Hacker Dojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackerdojo/events/wqkgntygcqbjc/"&gt;&lt;strong&gt;RUST MEETUP at HACKER DOJO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-10 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951467"&gt;&lt;strong&gt;Lechmere Rust Lunch, Jan 10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-16 | Nashville, TN, US | &lt;a href="https://www.meetup.com/music-city-rust-developers/events/"&gt;Music City Rust Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/music-city-rust-developers/events/304333017"&gt;&lt;strong&gt;Rust Game Development Series 1: Community Introductions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-18 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951470"&gt;&lt;strong&gt;Back Bay Rust Lunch, Jan 18&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/302638258"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-22 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/events/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyhccbdc"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1h2zwpx/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It's only a transmute if it's from the transmute region of std; otherwise it's just sparkling unsafety.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://github.com/rust-lang/rust/pull/128351#issuecomment-2552304484"&gt;Josh Triplett on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1645"&gt;Josh&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1hn7y8z/this_week_in_rust_579/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 578</title><link href="https://this-week-in-rust.org/blog/2024/12/18/this-week-in-rust-578/" rel="alternate"></link><published>2024-12-18T00:00:00-05:00</published><updated>2024-12-18T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2024-12-18:/blog/2024/12/18/this-week-in-rust-578/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want TWIR in your inbox? &lt;a href="https://this-week-in-rust.us11.list-manage.com/subscribe?u=fd84c1c757e02889a9b08d289&amp;amp;id=0ed8b72485"&gt;Subscribe here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/12/16/project-goals-nov-update.html"&gt;November project goals update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2024/12/13/this-development-cycle-in-cargo-1.84.html"&gt;This Development-cycle in Cargo: 1.84&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2024/12/17/project-director-update.html"&gt;December 2024 Project Director Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2024-11/"&gt;This Month in Rust OSDev: November 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/blog/hyper-roadmap-2025/"&gt;hyper Roadmap 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thisweekinbevy.com/issue/2024-12-09-fallible-systems-bindless-and-immutable-components"&gt;Bevy Fallible Systems, Bindless, and Immutable Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sequoia-pgp.org/blog/2024/12/16/202412-sq-1.0/"&gt;Sequoia PGP: A Sapling Matures: Meet sq 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emilk/egui/releases/tag/0.30.0"&gt;Release 0.30.0 - egui_kittest and modals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/blog/fish-4b/"&gt;fish-shell 4.0b1, now in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turso.tech/blog/introducing-limbo-a-complete-rewrite-of-sqlite-in-rust"&gt;Introducing Limbo: A complete rewrite of SQLite in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0067"&gt;Streaming data analytics, Fluvio 0.14.0 release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/announcing-hex-display-a-modern-alternative-to-xxd/122523"&gt;Announcing Hex Display: A modern &lt;code&gt;xxd&lt;/code&gt; alternative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.weiznich.de/blog/diesel-nl-net-grant-window-functions/"&gt;Diesel: Window functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rerun.io/blog/graphs"&gt;Rerun 0.21.0 - Graph view, 3D Grid &amp;amp; UI/UX improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/grtlr/fjadra"&gt;Introducing Fjädra — a Rust port of &lt;code&gt;d3-force&lt;/code&gt; for graph layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/temporal-spatial-memory-safety/"&gt;What are temporal and spatial memory safety?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.warp.dev/blog/reducing-wasm-binary-size"&gt;Reducing WASM binary size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cliffle.com/blog/exhubris-super/"&gt;Crash recovery in 256 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustunit.com/blog/2024/12-16-rust-feature-debugging/"&gt;Rust crate feature debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://timclicks.dev/podcast/nell-shamrell-harrington"&gt;Building Rust: An interview with Nell Shamrell-Harrington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v5.chriskrycho.com/journal/read-the-code/using-drop-safely-in-rust/"&gt;Read the Code: Using Drop Safely in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purplesyringa.moe/blog/thoughts-on-rust-hashing/"&gt;Thoughts on Rust hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maplant.com/2024-12-13-Scheme-to-the-Spec-Part-I:-Concurrent-Cycle-Collection.html"&gt;Scheme to the Spec Part I: Concurrent Cycle Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doublefree.bearblog.dev/solving-advent-of-code-at-compile-time-with-rust-macros/"&gt;Solving Advent of Code at Compile Time with Rust Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=ITTj7ByNStE"&gt;Rust code reading: The thousands crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/YsupdHTAKDw"&gt;Building a Lua package manager in Rust (Arabic)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/szabgab/what-is-shift-left-programming-5601"&gt;What is shift-left ⬅️ programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/rust-update-2024-12-17"&gt;Rust social status update 2024.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.blog/ai-and-ml/llms/so-many-tokens-so-little-time-introducing-a-faster-more-flexible-byte-pair-tokenizer/"&gt;So many tokens, so little time: Introducing a faster, more flexible byte-pair tokenizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/cmd_lib"&gt;cmd_lib&lt;/a&gt;, a library of command-line macros and utilities to write shell-script like tasks easily in Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1382"&gt;Remo Senekowitsch&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="calls-for-testing"&gt;&lt;a class="toclink" href="#calls-for-testing"&gt;Calls for Testing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;!-- Calls for Testing go here, use this format:
    * [&lt;RFC Topic&gt;](&lt;RFC URL&gt;)
        * [Tracking Issue](&lt;Tracking Issue URL&gt;)
        * [Testing steps](&lt;Testing Steps URL&gt;)
--&gt;
&lt;!-- or if there are no new or updated RFCs this week, use: --&gt;
&lt;!-- * *No New or Updated RFCs were created this week.* --&gt;
&lt;!-- Remember to remove the `call-for-testing` label from the RFC so that the maintainer can signal for testers again, if desired. --&gt;

&lt;h3 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/call-for-testing"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="rustup"&gt;&lt;a class="toclink" href="#rustup"&gt;&lt;a href="https://github.com/rust-lang/rustup/labels/call-for-testing"&gt;Rustup&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Calls for participation were submitted this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://github.com/rust-lang/this-week-in-rust?tab=readme-ov-file#call-for-participation-guidelines"&gt;here&lt;/a&gt; or through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="cfp-events"&gt;&lt;a class="toclink" href="#cfp-events"&gt;CFP - Events&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Calls for papers or presentations were submitted this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;437 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-12-10..2024-12-17"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134185"&gt;(Re-)Implement &lt;code&gt;impl_trait_in_bindings&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134244"&gt;&lt;code&gt;rustc_borrowck&lt;/code&gt;: Stop suggesting the invalid syntax &lt;code&gt;&amp;amp;mut raw const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133938"&gt;&lt;code&gt;rustc_mir_dataflow&lt;/code&gt; cleanups, including some renamings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134115"&gt;&lt;code&gt;rustc_target&lt;/code&gt;: ppc64 target string fixes for LLVM 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134140"&gt;add AST support for unsafe binders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133122"&gt;add unpolished, experimental support for AFIDT (async fn in dyn trait)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134173"&gt;allow &lt;code&gt;symbol_intern_string_literal&lt;/code&gt; lint in test modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132961"&gt;arbitrary self types v2: main compiler changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133598"&gt;change &lt;code&gt;GetManyMutError&lt;/code&gt; to match T-libs-api decision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134371"&gt;check for array lengths that aren't actually &lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/128004"&gt;codegen &lt;code&gt;#[naked]&lt;/code&gt; functions using global asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134260"&gt;correctly handle comments in attributes in doctests source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134103"&gt;don't ICE when encountering never in range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134313"&gt;don't make a def id for &lt;code&gt;impl_trait_in_bindings&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133633"&gt;don't show the full linker args unless &lt;code&gt;--verbose&lt;/code&gt; is passed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134017"&gt;don't use &lt;code&gt;AsyncFnOnce::CallOnceFuture&lt;/code&gt; bounds for signature deduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134295"&gt;encode coroutine-closures in SMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134136"&gt;exercise const trait interaction with default fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134010"&gt;fix ICE on type error in promoted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133392"&gt;fix ICE when multiple supertrait substitutions need assoc but only one is provided&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134357"&gt;fix &lt;code&gt;trimmed_def_paths&lt;/code&gt; ICE in the function ptr comparison lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134204"&gt;fix our &lt;code&gt;llvm::Bool&lt;/code&gt; typedef to be signed, to match &lt;code&gt;LLVMBool&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134058"&gt;interpret: reduce usage of &lt;code&gt;TypingEnv::fully_monomorphized&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133478"&gt;jsondocck: parse, don't validate commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133937"&gt;keep track of parse errors in &lt;code&gt;mod&lt;/code&gt;s and don't emit resolve errors for paths involving them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/131558"&gt;lint on combining &lt;code&gt;#[no_mangle]&lt;/code&gt; and &lt;code&gt;#[export_name]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134008"&gt;make &lt;code&gt;Copy&lt;/code&gt; unsafe to implement for ADTs with &lt;code&gt;unsafe&lt;/code&gt; fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134314"&gt;make sure to use normalized ty for unevaluated const in default &lt;code&gt;struct&lt;/code&gt; value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134117"&gt;modifies the index instruction from &lt;code&gt;gep [0 x %Type]&lt;/code&gt; to &lt;code&gt;gep %Type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134144"&gt;properly consider APITs for never type fallback ascription fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134192"&gt;remove &lt;code&gt;Lexer&lt;/code&gt;'s dependency on &lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134302"&gt;remove queries from the driver interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134142"&gt;rudimentary heuristic to insert parentheses when needed for RPIT overcaptures lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134070"&gt;some asm! diagnostic adjustments and a papercut fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134386"&gt;some trait method vs impl method signature difference diagnostic cleanups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132939"&gt;suggest using deref in patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134154"&gt;suppress field expr with generics error message if it's a method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134081"&gt;try to evaluate constants in legacy mangling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134181"&gt;tweak multispan rendering to reduce output length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134041"&gt;use SourceMap to load debugger visualizer files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134256"&gt;use a more precise span in &lt;code&gt;placeholder_type_error_diag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134089"&gt;use newly added exceptions to non default branch warning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134209"&gt;validate &lt;code&gt;--skip&lt;/code&gt; and &lt;code&gt;--exclude&lt;/code&gt; paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134105"&gt;validate self in host predicates correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133734"&gt;bounds-check with PtrMetadata instead of Len in MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4008"&gt;miri: TB Optimization: Skip subtrees based on the subtree's root node's permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4069"&gt;miri: &lt;code&gt;localtime_r&lt;/code&gt;: deduplicate timezone name allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4036"&gt;miri: use clap in miri-script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134116"&gt;stabilize &lt;code&gt;const_nonnull_new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132706"&gt;stabilize async closures&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3668-async-closures.html"&gt;#3668&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134178"&gt;stabilize the Rust 2024 prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133223"&gt;&lt;code&gt;UniqueRc&lt;/code&gt; trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130361"&gt;&lt;code&gt;std::net&lt;/code&gt;: Solaris supports &lt;code&gt;SOCK_CLOEXEC&lt;/code&gt; as well since 11.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133406"&gt;add value accessor methods to &lt;code&gt;Mutex&lt;/code&gt; and &lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132975"&gt;de-duplicate and improve definition of &lt;code&gt;core::ffi::c_char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133472"&gt;run TLS destructors for wasm32-wasip1-threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133184"&gt;wasi/fs: improve stopping condition for &lt;code&gt;&amp;lt;ReadDir&lt;/code&gt; as &lt;code&gt;Iterator&amp;gt;::next&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/576"&gt;codegen_gcc: stabilize &lt;code&gt;lang_tests_common&lt;/code&gt; config parsing logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/577"&gt;codegen_gcc: use casts instead of bitcast between pointers and integers to fix issues when using the lld linker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14902"&gt;cargo: build-script: Pass &lt;code&gt;CARGO_CFG_FEATURE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14917"&gt;cargo: SourceId: use stable hash from rustc-stable-hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14931"&gt;cargo: base: Support bases in patches in virtual manifests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14911"&gt;cargo: build-rs: Implicitly report rerun-if-env-changed for input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14921"&gt;cargo: resolver: Don't report all versions as rejected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14923"&gt;cargo: resolver: In errors, show rejected versions over alt versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14927"&gt;cargo: resolver: Report invalid index entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14897"&gt;cargo: resolver: Report unmatched versions, rather than saying no package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14925"&gt;cargo: script: Don't override the release profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14915"&gt;cargo: a faster hash for ActivationsKey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14928"&gt;cargo: implement &lt;code&gt;--depth workspace&lt;/code&gt; for &lt;code&gt;cargo tree&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14926"&gt;cargo: &lt;code&gt;emit_serialized_unit_graph&lt;/code&gt; uses the configured shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134231"&gt;rustdoc-search: fix mismatched path when parent re-exported twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134277"&gt;rustdoc-search: handle &lt;code&gt;impl Into&amp;lt;X&amp;gt;&lt;/code&gt; better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134214"&gt;rustdoc: fix self cmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13684"&gt;clippy: allow &lt;code&gt;needless_option_take&lt;/code&gt; to report for more cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13762"&gt;clippy: better help message for &lt;code&gt;comparison_chain&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13824"&gt;clippy: correct &lt;code&gt;single_match&lt;/code&gt; lint suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13836"&gt;clippy: correct suggestion for &lt;code&gt;unnecessary_sort_by&lt;/code&gt; in &lt;code&gt;no_std&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13841"&gt;clippy: correctly handle string indices in &lt;code&gt;literal_string_with_formatting_arg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13797"&gt;clippy: detect shadowing in pattern field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13834"&gt;clippy: do not suggest using &lt;code&gt;Error&lt;/code&gt; in &lt;code&gt;no_std&lt;/code&gt; before Rust 1.81&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13830"&gt;clippy: fix &lt;code&gt;must_use_unit&lt;/code&gt; suggestion when there're multiple attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13765"&gt;clippy: fix &lt;code&gt;single_match&lt;/code&gt; lint being emitted when it should not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13398"&gt;clippy: initial impl of &lt;code&gt;repr_packed_without_abi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18652"&gt;rust-analyzer: add an assist to extract an expression into a constant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18458"&gt;rust-analyzer: add diagnostic fix to remove unnecessary wrapper in type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18656"&gt;rust-analyzer: preserve order of parameters in &lt;code&gt;extract_functions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18696"&gt;rust-analyzer: report unresolved idents for implicit captures in &lt;code&gt;format_args!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18666"&gt;rust-analyzer: fix publish workflow link in manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18660"&gt;rust-analyzer: copied proc-macros not being cleaned up on exit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18700"&gt;rust-analyzer: fix a panic with a diagnostics fix when a keyword is used as a field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18699"&gt;rust-analyzer: fix path qualified auto-importing completions not working with re-exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18693"&gt;rust-analyzer: fix proc-macro dylib names on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18668"&gt;rust-analyzer: fix sourceroot construction for virtual manifests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18667"&gt;rust-analyzer: generate implementation with items even if snippet text edit is disabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18695"&gt;rust-analyzer: improve name suggestion for &lt;code&gt;destructure_tuple_binding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18675"&gt;rust-analyzer: panic when displaying generic params with defaults, again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18663"&gt;rust-analyzer: swallow rustfmt parsing panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18690"&gt;rust-analyzer: use string literal contents as a name when extracting into variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18653"&gt;rust-analyzer: hash completion items to properly match them during /resolve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18466"&gt;rust-analyzer: properly handle different defaults for severity of lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18674"&gt;rust-analyzer: show expansion errors in &lt;code&gt;expand_macro&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;!-- Perf results go here --&gt;

&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;!-- Approved RFCs go here, use this format: * [Topic](URL) --&gt;
&lt;!-- or if none were approved this week, use: * *No RFCs were approved this week.* --&gt;
&lt;!-- * []() --&gt;

&lt;!--
### [Approved Major Change Proposals (MCP)](https://forge.rust-lang.org/compiler/mcp.html)
&lt;!~~ MCPs occur infrequently, so this section is commented out by default. ~~&gt;
&lt;!~~ MCPs which have been approved or rejected this week go here, use this format: * [major change accepted|rejected] [Topic](URL) ~~&gt;
--&gt;

&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs_1"&gt;&lt;a class="toclink" href="#rfcs_1"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;!-- RFCs which have entered FCP go here, use this format: * [disposition: merge|close] [Topic](URL) --&gt;
&lt;!-- or if none entered FCP this week, use: * *No RFCs entered Final Comment Period this week.* --&gt;
&lt;!-- * [disposition: ] []() --&gt;

&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;!-- Tracking Issues which have entered FCP go here, use this format: * [disposition: merge|close] [Topic](URL) --&gt;
&lt;!-- or if none entered FCP this week, use: --&gt;
&lt;!-- * *No Tracking Issues or PRs entered Final Comment Period this week.* --&gt;
&lt;!-- * [disposition: ] []() --&gt;

&lt;h5 id="rust_1"&gt;&lt;a class="toclink" href="#rust_1"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="language-team"&gt;&lt;a class="toclink" href="#language-team"&gt;&lt;a href="https://github.com/rust-lang/lang-team/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc+"&gt;Language Team&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;!-- New or updated RFCs go here, use this format: * [new|updated] [Topic](URL) --&gt;
&lt;!-- or if there are no new or updated RFCs this week, use: --&gt;
&lt;!-- * *No New or Updated RFCs were created this week.* --&gt;
&lt;!-- * [new|updated] []() --&gt;

&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-12-18 - 2025-01-15 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-19 | Virtual | &lt;a href="https://www.eventbrite.de/o/scandio-gmbh-75623231843"&gt;Scandio GmBH&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/einfuhrung-in-rust-fur-eine-nachhaltige-zukunft-tickets-1106203667949"&gt;&lt;strong&gt;Einführung in Rust: Für eine nachhaltige Zukunft / Introduction to Rust: For a Sustainable Future&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-19 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2024/12/19/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633276/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-19 | Virtual (Buenos Aires, AR) | &lt;a href="https://www.meetup.com/rust-argentina/events/"&gt;Rust en Español&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-argentina/events/305095113"&gt;&lt;strong&gt;Despedida de Año 🎉🎉&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-19 | Virtual (Mexico City, DF, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/304639403/"&gt;&lt;strong&gt;Posada 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-20 | Virtual (Jersey City, NJ, US) | &lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/"&gt;Jersey City Classy and Curious Coders Club Cooperative&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/events/gvxrntygcqbbc/"&gt;&lt;strong&gt;Rust Coding / Game Dev Fridays Open Mob Session!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-22 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/304937982"&gt;&lt;strong&gt;Are We Embedded Yet? - Implementing tiny HTTP server on a microcontroller&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-24 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fkmcntygcqbgc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-26 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898145"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-02| Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633277/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-04 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033/"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-06 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/305045436"&gt;&lt;strong&gt;logger.info(f"Don't Give your {secrets} away") by Tamar Galer (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-07 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304883841"&gt;&lt;strong&gt;Microdosing Rust to your organization with Aviram Hassan (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-08 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304951805"&gt;&lt;strong&gt;BlockMesh Network implemented in Rust with Ohad Dahan (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898167"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/events/"&gt;Dallas Rust User Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/302815031"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-14 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/305064546"&gt;&lt;strong&gt;An introduction to WASM in Rust with Márk Tolmács (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-15 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/events/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/304051782"&gt;&lt;strong&gt;Leptos&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2025-01-12 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/rust-tlv/events/"&gt;Rust 🦀 TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/304898730/"&gt;&lt;strong&gt;In person Rust January 2025 at Abra in Raanana&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-18 | Ghent, BE | &lt;a href="https://sysghent.be"&gt;Systems Programming Ghent&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sysghent.be"&gt;&lt;strong&gt;Launch of new community for Rust and C++ developers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-08 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/events/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/305038426"&gt;&lt;strong&gt;Reading Rust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/events/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/300820279/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-09 | Oslo, NO | &lt;a href="https://www.meetup.com/rust-oslo/events/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-oslo/events/303154281"&gt;&lt;strong&gt;Rust Hack'n'Learn at Kampen Bistro&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-22 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951457"&gt;&lt;strong&gt;Harvard Square Rust Lunch, Dec 22&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-26 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/hackerdojo/events/"&gt;Hacker Dojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackerdojo/events/wqkgntygcqbjc/"&gt;&lt;strong&gt;RUST MEETUP at HACKER DOJO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-10 | Boston, MA, US | &lt;a href="https://www.meetup.com/boston-rust-meetup-25317522anphwzdw/events/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/304951467"&gt;&lt;strong&gt;Lechmere Rust Lunch, Jan 10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1h2zwpx/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;She said yes!! (And so did I!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://hachyderm.io/@fasterthanlime/113639047728482697"&gt;Amos on Mastodon&lt;/a&gt; proving that Rustaceans &lt;em&gt;do&lt;/em&gt; have a life outside of Rust. Congratulations, Amos!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1642"&gt;Jacob Pratt&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1hhlwbf/this_week_in_rust_578_this_week_in_rust/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 577</title><link href="https://this-week-in-rust.org/blog/2024/12/11/this-week-in-rust-577/" rel="alternate"></link><published>2024-12-11T00:00:00-05:00</published><updated>2024-12-11T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2024-12-11:/blog/2024/12/11/this-week-in-rust-577/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://x.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on X (formerly Twitter) or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want TWIR in your inbox? &lt;a href="https://this-week-in-rust.us11.list-manage.com/subscribe?u=fd84c1c757e02889a9b08d289&amp;amp;id=0ed8b72485"&gt;Subscribe here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2024/12/09/test-infra-nov-2024.html"&gt;This Month in Our Test Infra: November 2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2024/12/09/leadership-council-update.html"&gt;December 2024 Leadership Council Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theembeddedrustacean.com/p/the-embedded-rustacean-issue-34"&gt;The Embedded Rustacean Issue #34&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-trends.com/newsletter/your-weekly-rust-fix-templates-dependencies-and-a-big-giveaway/"&gt;Rust Trends Issue #55&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/release-060/"&gt;Dioxus 0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flawless.dev/replay/"&gt;Flawless Replay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seri.tools/blog/rust9x-1-84/"&gt;Rust9x update: Rust 1.84.0-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/blog/2024-12-03-whats-new-in-seaquery-0.32.x/"&gt;What's new in SeaQuery 0.32.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://andrzej.lichnerowicz.pl/en/blog/rust-macros-a-cautionary-tale/"&gt;Rust Macros: A Cautionary Tale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.valyagolev.net/fly-teloxide/"&gt;Running teloxide bots cheaply on Fly.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jpcamara.com/2024/12/01/speeding-up-ruby.html"&gt;Speeding up Ruby by rewriting C… in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c"&gt;Memory-safe PNG decoders now vastly outperform C PNG libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ohadravid.github.io/posts/2024-12-state-of-the-crates/"&gt;State of the Crates 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diesel.rs/compare_diesel.html"&gt;Comparing Rust Database Crates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ntietz.com/blog/parsing-midi-rust/"&gt;Parsing MIDI messages in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustunit.com/blog/2024/12-10-rust-web-drag-drop-image/"&gt;Drag &amp;amp; Drop Images into Bevy 0.15 on the web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orxfun.github.io/orxfun-notes/#/missing-iterable-traits-2024-12-13"&gt;Missing iterable traits and how to introduce them effortlessly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.weiznich.de/eurorust_2024.html"&gt;EuroRust: Introduction to Diesel: basic and advanced concepts in practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://softwaremill.com/andre-bogus-my-rust-story/"&gt;My Rust Story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://filtra.io/rust/jobs-report/nov-24"&gt;November 2024 Rust Jobs Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PL6CJYn40gN6jOg_cPqRfXMNriHknKy4VW"&gt;How to Integrate C++ and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Kqz-umsAnk8"&gt;2024 LLVM Developers' Meeting - Rust ❤️ LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/alekseysidorov/include-utils"&gt;include-utils&lt;/a&gt;, a more powerful replacement for the standard library's &lt;code&gt;include_str&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1381"&gt;Aleksey Sidorov&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="calls-for-testing"&gt;&lt;a class="toclink" href="#calls-for-testing"&gt;Calls for Testing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/call-for-testing"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rustup"&gt;&lt;a class="toclink" href="#rustup"&gt;&lt;a href="https://github.com/rust-lang/rustup/labels/call-for-testing"&gt;Rustup&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No calls for testing were issued this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h3 id="rustup_1"&gt;&lt;a class="toclink" href="#rustup_1"&gt;&lt;a href="https://github.com/rust-lang/rustup/labels/call-for-testing"&gt;Rustup&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Calls for participation were submitted this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://github.com/rust-lang/this-week-in-rust?tab=readme-ov-file#call-for-participation-guidelines"&gt;here&lt;/a&gt; or through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="cfp-events"&gt;&lt;a class="toclink" href="#cfp-events"&gt;CFP - Events&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Calls for papers or presentations were submitted this week.&lt;/em&gt;x   &lt;/p&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt; or by reaching out on &lt;a href="https://x.com/ThisWeekInRust"&gt;X (formerly Twitter)&lt;/a&gt; or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;Mastodon&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;462 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-12-03..2024-12-10"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134073"&gt;&lt;code&gt;dataflow_const_prop&lt;/code&gt;: do not eval a ptr address in SwitchInt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133874"&gt;&lt;code&gt;fn_sig_for_fn_abi&lt;/code&gt; should return a &lt;code&gt;ty::FnSig&lt;/code&gt;, no need for a binder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130777"&gt;&lt;code&gt;rust_for_linux&lt;/code&gt;: -Zreg-struct-return commandline flag for X86&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133992"&gt;actually walk into lifetimes and attrs in &lt;code&gt;EarlyContextAndPass&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133861"&gt;add &lt;code&gt;allocate_bytes&lt;/code&gt; and refactor &lt;code&gt;allocate_str&lt;/code&gt; in InterpCx for raw byte…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133233"&gt;add context to "const in pattern" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118833"&gt;add lint against function pointer comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133767"&gt;add more info on type/trait mismatches for different crate versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133850"&gt;avoid &lt;code&gt;opaque type not constrained&lt;/code&gt; errors in the presence of other errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133936"&gt;avoid fetching the anon const hir node that is already available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133517"&gt;deeply normalize when computing implied outlives bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133934"&gt;do not implement unsafe auto traits for types with unsafe fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133522"&gt;don't suggest restricting bound with unstable traits on stable and mention it's unstable on nightly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133134"&gt;don't use a SyntheticProvider for literally every type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133784"&gt;fix MutVisitor's default implementations to visit Stmt's and BinOp's spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122161"&gt;fix suggestion when shorthand &lt;code&gt;self&lt;/code&gt; has erroneous type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132612"&gt;gate async fn trait bound modifier on &lt;code&gt;async_trait_bounds&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133875"&gt;handle &lt;code&gt;--json-output&lt;/code&gt; properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133954"&gt;hide errors whose suggestions would contain error constants or types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133607"&gt;implement checks for tail calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133681"&gt;improve &lt;code&gt;TagEncoding::Niche&lt;/code&gt; docs, sanity check, and UB checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133737"&gt;include LLDB and GDB visualizers in MSVC distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/129514"&gt;introduce &lt;code&gt;default_field_values&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133545"&gt;lint against &lt;code&gt;Symbol::intern&lt;/code&gt; on a string literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/131669"&gt;lint: change help for pointers to dyn types in FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133774"&gt;make CoercePointee errors translatable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133828"&gt;make sure to record deps from cached task in new solver on first run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133996"&gt;move most tests for &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;#[link(..)]&lt;/code&gt; into &lt;code&gt;tests/ui/link-native-libs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133872"&gt;no need to create placeholders for GAT args in &lt;code&gt;confirm_object_candidate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133931"&gt;only allow &lt;code&gt;PassMode::Direct&lt;/code&gt; for aggregates on wasm when using the C ABI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133424"&gt;parse guard patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133753"&gt;reduce false positives on some common cases from if-let-rescope lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133325"&gt;reimplement &lt;code&gt;~const&lt;/code&gt; trait specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133559"&gt;structurally resolve in &lt;code&gt;adjust_for_branches&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133558"&gt;structurally resolve in &lt;code&gt;probe_adt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132723"&gt;unify &lt;code&gt;sysroot_target_{bin,lib}dir&lt;/code&gt; handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133779"&gt;use correct &lt;code&gt;hir_id&lt;/code&gt; for array const arg infers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4074"&gt;miri: cleanup: avoid passing byte slice to &lt;code&gt;anonsocket_read&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4076"&gt;miri: fix SC fence logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4057"&gt;miri: fix weak memory emulation to avoid generating behaviors that are forbidden under C++ 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/4071"&gt;miri: implement &lt;code&gt;simd_relaxed_fma&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133211"&gt;extend Miri to correctly pass mutable pointers through FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133883"&gt;remove polymorphization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133891"&gt;introduce &lt;code&gt;MixedBitSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133696"&gt;stabilize &lt;code&gt;const_collections_with_hasher&lt;/code&gt; and &lt;code&gt;build_hasher_default_const_new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133762"&gt;stabilize &lt;code&gt;const_{size,align}_of_val&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133089"&gt;stabilize &lt;code&gt;noop_waker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130209"&gt;stabilize &lt;code&gt;std::io::ErrorKind::CrossesDevices&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/130254"&gt;stabilize &lt;code&gt;std::io::ErrorKind::QuotaExceeded&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133726"&gt;add &lt;code&gt;core::arch::breakpoint&lt;/code&gt; and test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118159"&gt;implementation of &lt;code&gt;fmt::FormattingOptions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132187"&gt;add Extend impls for tuples of arity 1 through 12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14898"&gt;cargo: &lt;code&gt;docs(fingerprint)&lt;/code&gt;: cargo-rustc extra flags do not affect the metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14910"&gt;cargo: &lt;code&gt;feat(build-rs)&lt;/code&gt;: Add the 'error' directive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14895"&gt;cargo: &lt;code&gt;fix(add)&lt;/code&gt;: Don't select yanked versions when normalizing names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14913"&gt;cargo: &lt;code&gt;fix(build-rs)&lt;/code&gt;: Correctly refer to the item in assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14899"&gt;cargo: &lt;code&gt;fix(build-std)&lt;/code&gt;: determine root crates by target spec &lt;code&gt;std:bool&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14830"&gt;cargo: &lt;code&gt;fix(fingerprint)&lt;/code&gt;: Don't throwaway the cache on RUSTFLAGS changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14890"&gt;cargo: &lt;code&gt;fix(fix)&lt;/code&gt;: Migrate workspace dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14896"&gt;cargo: &lt;code&gt;test(build-std)&lt;/code&gt;: make mock-std closer to real world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14901"&gt;cargo: fix(build-rs)!: remove meaningless &lt;code&gt;'cargo_cfg_debug_assertions'&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14908"&gt;cargo: refactor: use &lt;code&gt;Path::push&lt;/code&gt; to construct remap-path-prefix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/14849"&gt;cargo: semVer: add section on RPIT capturing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133960"&gt;rustdoc: remove eq for &lt;code&gt;clean::Attributes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/134053"&gt;rustdoc: rename &lt;code&gt;issue-\d+.rs&lt;/code&gt; tests to have meaningful names (part 10)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133764"&gt;rustdoc: rename &lt;code&gt;set_back_info&lt;/code&gt; to &lt;code&gt;restore_module_data&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/132155"&gt;rustdoc: always display first line of impl blocks even when collapsed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/133804"&gt;improve code for FileName retrieval in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13742"&gt;clippy: &lt;code&gt;doc_lazy_continuation&lt;/code&gt;: Correctly count indent with backslashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13743"&gt;clippy: extend &lt;code&gt;precedence&lt;/code&gt; for bitmasking and shift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/13251"&gt;clippy: new lint for &lt;code&gt;as *const _&lt;/code&gt; and &lt;code&gt;as *mut _&lt;/code&gt; pointer casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18522"&gt;rust-analyzer: add Configurable Option to Exclude Trigger Characters for Typing Assists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18610"&gt;rust-analyzer: add implict unsafety inlay hints for extern blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18628"&gt;rust-analyzer: add typing handler for param list pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18604"&gt;rust-analyzer: complete derive helper attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18541"&gt;rust-analyzer: complete diagnostics in ty lowering groundwork and serve a first diagnostic 🎉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18609"&gt;rust-analyzer: extend reported unsafe operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18594"&gt;rust-analyzer: support &lt;code&gt;AsyncFnX&lt;/code&gt; traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18593"&gt;rust-analyzer: fix parsing of parenthesized type args and RTN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18608"&gt;rust-analyzer: better parser recovery for paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18633"&gt;rust-analyzer: coerce two &lt;code&gt;FnDef&lt;/code&gt;s to fn pointers even if they are the same, if they are subtypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18616"&gt;rust-analyzer: disable &lt;code&gt;&amp;lt;&lt;/code&gt; typing handler again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18611"&gt;rust-analyzer: do not report warnings from proc macros, ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18555"&gt;rust-analyzer: fix a bug when synthetic AST node were searched in the AST ID map and caused panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18625"&gt;rust-analyzer: fix parser getting stuck for bad asm expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18622"&gt;rust-analyzer: fix parsing of dyn T in generic arg on 2015 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18618"&gt;rust-analyzer: fix parsing of integer/keyword name refs in various places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18607"&gt;rust-analyzer: fix shadowing of record &lt;code&gt;enum&lt;/code&gt; variant in patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18605"&gt;rust-analyzer: fixed another bug with glob imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18531"&gt;rust-analyzer: map new replacement nodes to their mutable equivalents in &lt;code&gt;SyntaxEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18645"&gt;rust-analyzer: non-exhaustive structs may be empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18619"&gt;rust-analyzer: panic when displaying generic params with defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18620"&gt;rust-analyzer: parse lifetime bounds in lifetime param into TypeBoundList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18621"&gt;rust-analyzer: resolve generic parameters within use captures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18630"&gt;rust-analyzer: temporarily disable completion resolve support for helix and neovim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18627"&gt;rust-analyzer: improve heuristics for on typing semicolon insertion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18474"&gt;rust-analyzer: make bracket typing handler work on more things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18551"&gt;rust-analyzer: migrate &lt;code&gt;add_turbo_fish&lt;/code&gt; to &lt;code&gt;SyntaxEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18483"&gt;rust-analyzer: migrate &lt;code&gt;introduce_named_generic&lt;/code&gt; Assist to Use &lt;code&gt;SyntaxFactory&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18538"&gt;rust-analyzer: migrate &lt;code&gt;sort_items&lt;/code&gt; Assist to Use &lt;code&gt;SyntaxFactory&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/18592"&gt;rust-analyzer: vscode: only show status bar item in relevant files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A pretty quiet week, with both few PRs landed and no large changes in performance.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=490b2cc09860dd62a7595bb07364d71c12ce4e60&amp;amp;end=1b3fb316751227d30b1523ed0e3f00d83956d4d0&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;490b2cc0..1b3fb316&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0 Regressions, 0 Improvements, 7 Mixed; 4 of them in rollups
25 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2024-12-09.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs_1"&gt;&lt;a class="toclink" href="#rfcs_1"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust_1"&gt;&lt;a class="toclink" href="#rust_1"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/128780"&gt;Add &lt;code&gt;--doctest-compilation-args&lt;/code&gt; option to add compilation flags to doctest compilation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/cargo/pull/14900"&gt;fix(cargo-rustc): stabilize higher precedence trailing flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-team"&gt;&lt;a class="toclink" href="#language-team"&gt;&lt;a href="https://github.com/rust-lang/lang-team/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc+"&gt;Language Team&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Team Proposals entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline Tracking Issues or PRs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3738"&gt;Drop type destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3737"&gt;#[must_use = false]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3736"&gt;RFC: Partial Types (v3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-12-11 - 2025-01-08 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-11 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/304047666/"&gt;&lt;strong&gt;egui&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Hybrid: In-Person and Virtual (Seattle, WA, US) | &lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/"&gt;Seattle Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/"&gt;&lt;strong&gt;December Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898129/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/events/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/300820276/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-13 | Virtual (Jersey City, NJ, US) | &lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/"&gt;Jersey City Classy and Curious Coders Club Cooperative&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/events/304730560/"&gt;&lt;strong&gt;Rust Coding / Game Dev Fridays Open Mob Session!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-17 | Virtual (San Francisco, CA, US) | &lt;a href="https://www.meetup.com/blockchaincentersf/"&gt;Blockchain Center SF&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/blockchaincentersf/events/kwnzntygcqbwb/"&gt;&lt;strong&gt;Rust in Web3: Developer Series&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-17 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/events/"&gt;Code Mavens 🦀 - 🐍 - 🐪&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/304824684/"&gt;&lt;strong&gt;Rust Source Code Reading: The thousands crate (Virtual, English)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-17 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/299346972/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-19 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2024/12/19/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633276/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-19 | Virtual (Mexico City, DF, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/304639403/"&gt;&lt;strong&gt;Posada 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-20 | Virtual (Jersey City, NJ, US) | &lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/"&gt;Jersey City Classy and Curious Coders Club Cooperative&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/jersey-city-classy-curious-coders-club-cooperative/events/gvxrntygcqbbc/"&gt;&lt;strong&gt;Rust Coding / Game Dev Fridays Open Mob Session!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-24 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fkmcntygcqbgc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-26 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298898129/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-02| Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298633277/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2025-01-04 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033/"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-14 | Bangalore/Bengaluru, IN | &lt;a href="https://hasgeek.com/rustbangalore"&gt;Rust Bangalore&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hasgeek.com/rustbangalore/december-2024-rustacean-meetup-workshop/"&gt;&lt;strong&gt;December 2024 Rustacean meetup/workshop&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-11 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/events/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/wrdkmtygcqbpb/"&gt;&lt;strong&gt;Reading Rust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Amsterdam, NL | &lt;a href="https://www.meetup.com/rust-amsterdam-group/events/"&gt;Rust Developers Amsterdam Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-amsterdam-group/events/304514267/"&gt;&lt;strong&gt;Rust Meetup @ JetBrains&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | München, DE | &lt;a href="https://www.meetup.com/rust-munich/events/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/304827279/"&gt;&lt;strong&gt;Rust Munich 2024 / 4 - Hacking Evening&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/events/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/304815850/"&gt;&lt;strong&gt;Rust Vienna - December | at Sentry.io 🦀&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-17 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/302425056/"&gt;&lt;strong&gt;Secret Santa in Rust: Unwrapping Property Testing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-18 | Ghent, BE | &lt;a href="https://sysghent.be"&gt;Systems Programming Ghent&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sysghent.be"&gt;&lt;strong&gt;Launch of new community for Rust and C++ developers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-12 | Hybrid: In-Person and Virtual (Seattle, WA, US) | &lt;a href="https://www.meetup.com/join-srug/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/join-srug/events/304806455/"&gt;&lt;strong&gt;December Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-12 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/hackerdojo/events/"&gt;Hacker Dojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackerdojo/events/wqkgntygcqbqb/"&gt;&lt;strong&gt;RUST MEETUP at HACKER DOJO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-16 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/304530508/"&gt;&lt;strong&gt;Minneapolis Rust Meetup Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-17 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/302638256/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-12-26 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/hackerdojo/events/"&gt;Hacker Dojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/hackerdojo/events/wqkgntygcqbjc/"&gt;&lt;strong&gt;RUST MEETUP at HACKER DOJO&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-12-16 | Collingwood, AU | &lt;a href="https://www.meetup.com/rust-melbourne/events/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-melbourne/events/304820598/"&gt;&lt;strong&gt;December 2024 Rust Melbourne Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1h2zwpx/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Memory-safe implementations of PNG (&lt;a href="https://crates.io/crates/png"&gt;png&lt;/a&gt;, &lt;a href="https://crates.io/crates/zune-png"&gt;zune-png&lt;/a&gt;, &lt;a href="https://github.com/google/wuffs/"&gt;wuffs&lt;/a&gt;) now dramatically outperform memory-unsafe ones (&lt;a href="http://www.libpng.org/"&gt;libpng&lt;/a&gt;, &lt;a href="https://libspng.org/"&gt;spng&lt;/a&gt;, &lt;a href="https://github.com/nothings/stb"&gt;stb_image&lt;/a&gt;) when decoding images.&lt;/p&gt;
&lt;p&gt;Rust &lt;a href="https://crates.io/crates/png"&gt;png&lt;/a&gt; crate that tops our benchmark shows &lt;strong&gt;1.8x&lt;/strong&gt; improvement over &lt;code&gt;libpng&lt;/code&gt; on x86 and &lt;strong&gt;1.5x&lt;/strong&gt; improvement on ARM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/1ha7uyi/memorysafe_png_decoders_now_vastly_outperform_c/"&gt;Shnatsel on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1641"&gt;Anton Fetisov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1hcj88m/this_week_in_rust_577/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry></feed>